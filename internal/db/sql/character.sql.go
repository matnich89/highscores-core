// Code generated by sqlc. DO NOT EDIT.
// source: character.sql

package db

import (
	"context"
	"time"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (
    name,
    last_check,
    created_at
) VALUES (
   $1, $2, $3
)
RETURNING id, name, last_check, created_at
`

type CreateCharacterParams struct {
	Name      string
	LastCheck time.Time
	CreatedAt time.Time
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.Name, arg.LastCheck, arg.CreatedAt)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastCheck,
		&i.CreatedAt,
	)
	return i, err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, name, last_check, created_at FROM characters
WHERE id = $1
`

func (q *Queries) GetCharacter(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastCheck,
		&i.CreatedAt,
	)
	return i, err
}

const getCharacterByName = `-- name: GetCharacterByName :one
SELECT id, name, last_check, created_at FROM characters
WHERE name = $1
`

func (q *Queries) GetCharacterByName(ctx context.Context, name string) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterByName, name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastCheck,
		&i.CreatedAt,
	)
	return i, err
}

const updateCharacter = `-- name: UpdateCharacter :exec
UPDATE characters
SET last_check = $2
WHERE  id = $1
`

type UpdateCharacterParams struct {
	ID        int64
	LastCheck time.Time
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacter, arg.ID, arg.LastCheck)
	return err
}
